<?php
/**
 * Created by PhpStorm.
 * User: eslider
 * Date: 31.03.18
 * Time: 21:07
 */

namespace app\components;


use app\models\Markets;
use app\models\News;
use app\models\Settings;
use app\models\Stock;

class NewsService
{
    public function runSimulation(){
        print("FAKE NEWS GENERATOR\r\n");

        $markets = Markets::find()->all();
        $lastTickSettings = Settings::findOne(['key' => 'lastTick']);


        foreach ($markets as $market){
            $possibleSector = [
                Stock::SECTOR_SERVICE,
                Stock::SECTOR_INDUSTRIAL,
                Stock::SECTOR_AGRICULTURAL
            ];

            foreach ($possibleSector as $sector){
                $possiblePriorities = [
                    News::PRIORITY_HIGH,
                    News::PRIORITY_MEDIUM,
                    News::PRIORITY_LOW
                ];

                $possibleTypes = [
                    News::TYPE_POSITIVE,
                    News::TYPE_NEGATIVE
                ];



                $news = new News();

                $news->fk_market = $market->id;
                $news->priority = $possiblePriorities[rand(0,2)];
                $news->type = $possibleTypes[rand(0,1)];
                $news->sector = $sector;
                $news->tick = $lastTickSettings->value;

                $news->text = "Autogenerated news";
                $news->title = "Auogenerated news";

                $news->save(false);
            }
        }

    }


    /**
     * @param Markets $market
     * @param Stock $stock
     * @param string $title
     * @param string $priority
     * @param string $text
     * @param string $type
     * @param int $tick
     * @return bool
     */
    public function create(Markets $market, Stock $stock, string $title, string $priority, string $text, string $type, int $tick){

        $news = new News();
        $news->title = $title;
        $news->priority = $priority;
        $news->text = $text;
        $news->fk_market = $market->id;
        $news->type = $type;
        $news->sector = $stock->sector;
        $news->tick = $tick;

        return $news->save(false);
    }

    public function getNewsRate(Stock $company, $tick){


        $newsList = News::find()
            ->where(['in','tick', [$tick-4,$tick-3,$tick-2,$tick-1,$tick]])
            ->where([
                'fk_market' => $company->fk_market,
                'sector' => $company->sector
            ])->all();



        $newsCountByPriority = [
            News::PRIORITY_HIGH => [
                News::TYPE_POSITIVE => 0,
                News::TYPE_NEGATIVE => 0,
            ],

            News::PRIORITY_MEDIUM => [
                News::TYPE_POSITIVE => 0,
                News::TYPE_NEGATIVE => 0,
            ],

            News::PRIORITY_LOW => [
                News::TYPE_POSITIVE => 0,
                News::TYPE_NEGATIVE => 0,
            ]

        ];

        foreach ($newsList as $news){
            if ($news->priority == News::PRIORITY_LOW){
                if ($news->type == News::TYPE_NEGATIVE){
                    $newsCountByPriority[News::PRIORITY_LOW][News::TYPE_NEGATIVE]++;
                }

                if ($news->type == News::TYPE_POSITIVE){
                    $newsCountByPriority[News::PRIORITY_LOW][News::TYPE_POSITIVE]++;
                }
            }

            if ($news->priority == News::PRIORITY_MEDIUM){
                if ($news->type == News::TYPE_NEGATIVE){
                    $newsCountByPriority[News::PRIORITY_MEDIUM][News::TYPE_NEGATIVE]++;
                }

                if ($news->type == News::TYPE_POSITIVE){
                    $newsCountByPriority[News::PRIORITY_MEDIUM][News::TYPE_POSITIVE]++;
                }
            }

            if ($news->priority == News::PRIORITY_HIGH){
                if ($news->type == News::TYPE_NEGATIVE){
                    $newsCountByPriority[News::PRIORITY_HIGH][News::TYPE_NEGATIVE]++;
                }

                if ($news->type == News::PRIORITY_HIGH){
                    $newsCountByPriority[News::PRIORITY_HIGH][News::TYPE_POSITIVE]++;
                }
            }
        }

        $rate = 1;


        foreach ($newsCountByPriority as $key => $value){
            if ($value[News::TYPE_NEGATIVE] > 0){
                if ($key == News::PRIORITY_HIGH)
                    $rate -= 1.75;

                if ($key == News::PRIORITY_MEDIUM)
                    $rate -= 1.5;

                if ($key == News::PRIORITY_LOW)
                    $rate -= 1.25;

            }

            if ($value[News::TYPE_POSITIVE] > 0){
                if ($key == News::PRIORITY_HIGH)
                    $rate += 1.75;

                if ($key == News::PRIORITY_MEDIUM)
                    $rate += 1.5;

                if ($key == News::PRIORITY_LOW)
                    $rate += 1.25;

            }

        }
        return $rate;
    }
}